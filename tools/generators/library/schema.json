{
  "$schema": "http://json-schema.org/schema",
  "title": "Create a feature library",
  "description": "Creates an Angular library for project or shared.",
  "cli": "nx",
  "$id": "library",
  "type": "object",
  "properties": {
    "scope": {
      "type": "string",
      "description": "Directory with app name and library scope - '{app}/{scope}'",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What app and scope is the library for?",
      "pattern": "^[a-z][a-z-/]+[a-z]$"
    },

    "type": {
      "type": "string",
      "description": "The type of the library. One of feature, ui, data-access, util or api.",
      "enum": ["feature", "ui", "data-access", "util", "api"],
      "x-prompt": {
        "message": "Which type of library would you like to create?",
        "type": "list",
        "items": [
          {
            "value": "data-access",
            "label": "Data access library"
          },
          {
            "value": "feature",
            "label": "Feature library"
          },
          {
            "value": "ui",
            "label": "UI library"
          },
          {
            "value": "util",
            "label": "Utility library"
          },
          {
            "value": "api",
            "label": "Api library"
          }
        ]
      },
      "$default": {
        "$source": "argv",
        "index": 1
      }
    },
    "name": {
      "type": "string",
      "description": "The name of the library. If none given, the last segment of scope will be taken as filename for the module.",
      "$default": {
        "$source": "argv",
        "index": 2
      }
    },

    "standalone": {
      "type": "boolean",
      "description": "Generate a library that uses a standalone component instead of a module as the entry point.",
      "default": false
    },
    "flat": {
      "type": "boolean",
      "default": false,
      "description": "Ensure the generated standalone component is not placed in a subdirectory. Disclaimer: This option is only valid when `--standalone` is set to `true`."
    },
    "prefix": {
      "type": "string",
      "format": "html-selector",
      "description": "The prefix to apply to generated selectors.",
      "alias": "p",
      "default": "nova"
    },


    "changeDetection": {
      "description": "The change detection strategy to use in the new component. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
      "enum": ["Default", "OnPush"],
      "type": "string",
      "default": "OnPush",
      "alias": "c"
    },
    "style": {
      "description": "The file extension or preprocessor to use for style files, or `none` to skip generating the style file. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
      "type": "string",
      "default": "scss",
      "enum": ["scss", "none"]
    },
    "skipModule": {
      "type": "boolean",
      "description": "Whether to skip the creation of a default module when generating the library.",
      "default": false
    },

    "publishable": {
      "type": "boolean",
      "default": false,
      "description": "Generate a publishable library."
    },
    "buildable": {
      "type": "boolean",
      "default": false,
      "description": "Generate a buildable library."
    },
    "skipFormat": {
      "description": "Skip formatting files.",
      "type": "boolean",
      "default": false
    },
    "addModuleSpec": {
      "description": "Add a module spec file.",
      "type": "boolean",
      "default": false
    },
    "skipPackageJson": {
      "type": "boolean",
      "default": false,
      "description": "Do not add dependencies to `package.json`."
    },
    "skipTsConfig": {
      "type": "boolean",
      "default": false,
      "description": "Do not update `tsconfig.json` for development experience."
    },
    "routing": {
      "type": "boolean",
      "default": false,
      "description": "Add router configuration. See `lazy` for more information."
    },
    "lazy": {
      "type": "boolean",
      "default": false,
      "description": "Add `RouterModule.forChild` when set to true, and a simple array of routes when set to false."
    },
    "parent": {
      "type": "string",
      "description": "Path to the parent route configuration using `loadChildren` or `children`, depending on what `lazy` is set to."
    },
    "strict": {
      "type": "boolean",
      "description": "Create a library with stricter type checking and build optimization options.",
      "default": true
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint", "none"],
      "default": "eslint"
    },
    "standaloneConfig": {
      "description": "Split the project configuration into `<projectRoot>/project.json` rather than including it inside `workspace.json`.",
      "type": "boolean"
    },
    "compilationMode": {
      "description": "Specifies the compilation mode to use. If not specified, it will default to `partial` for publishable libraries and to `full` for buildable libraries. The `full` value can not be used for publishable libraries.",
      "type": "string",
      "enum": ["full", "partial"]
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint `parserOptions.project` option. We do not do this by default for lint performance reasons.",
      "default": false
    },
    "addTailwind": {
      "type": "boolean",
      "description": "Whether to configure Tailwind CSS for the application. It can only be used with buildable and publishable libraries. Non-buildable libraries will use the application's Tailwind configuration.",
      "default": false
    },
    "displayBlock": {
      "description": "Specifies if the component generated style will contain `:host { display: block; }`. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
      "type": "boolean",
      "default": false,
      "alias": "b"
    },
    "inlineStyle": {
      "description": "Include styles inline in the component.ts file. Only CSS styles can be included inline. By default, an external styles file is created and referenced in the component.ts file. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
      "type": "boolean",
      "default": false,
      "alias": "s"
    },
    "inlineTemplate": {
      "description": "Include template inline in the component.ts file. By default, an external template file is created and referenced in the component.ts file. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
      "type": "boolean",
      "default": false,
      "alias": "t"
    },
    "viewEncapsulation": {
      "description": "The view encapsulation strategy to use in the new component. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
      "enum": ["Emulated", "None", "ShadowDom"],
      "type": "string",
      "alias": "v"
    },
    "skipTests": {
      "type": "boolean",
      "description": "Do not create `spec.ts` test files for the new component. Disclaimer: This option is only valid when `--standalone` is set to `true`.",
      "default": false
    }
  },
  "required": ["scope", "type"]
}
